#include <iostream>
#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>
#include"window.h"
#include"game.h"
#include"create_button.h"
#include"show_button.h"

using namespace std;

int main(int argc, char *argv[])
{
    Window_class main_window_obj(1024, 780);

   create_main_window(main_window_obj);
   press_any_key();
   create_game();

   

   Button_a button_a_obj(334, 333, 50, 50, "image/button_a.jpg");
    
    // Main loop
    bool quit = false;
    SDL_Event event;

    while (!quit)
    {
        while (SDL_PollEvent(&event) != 0)
        {
            if (event.type == SDL_QUIT)
            {
                quit = true; // Exit the main loop if the user closes the window
            }

            // Handle button click events
            button_a_obj.handle_event_lclick(event);
        }

        
        

        // Draw objects (like buttons) here
        show_button(button_a_obj);

        // Update the window surface
        SDL_UpdateWindowSurface(main_window);
    }

    // Clean up and close the application
    
    // Free any other resources if needed

    SDL_Quit();


    

   


    

        return 0;
    }
#include<iostream>
#include<SDL2/SDL.h>
#include<SDL2/SDL_image.h>
#include"window.h"

using namespace std;

SDL_Window *main_window = nullptr;
SDL_Surface *main_window_surface = nullptr;
SDL_Surface *main_window_surface_jpg = nullptr;

Window_class::Window_class(){
    height = 0;
    width = 0;
}

Window_class::Window_class(int x, int y){
    height = x;
    width = y;
}

int Window_class::get_window_height(){
    return height;
}

int Window_class::get_window_width(){
    return width;
}



bool init_SDL_lib(Window_class obj){
    bool success = true;

    if(SDL_Init(SDL_INIT_VIDEO) < 0){
        cout << "Error" << SDL_GetError() << endl;
        success = false;
    }
    else{
        main_window = SDL_CreateWindow("GAME", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, obj.get_window_height() , obj.get_window_width(), SDL_WINDOW_SHOWN );
        if(main_window == nullptr){
            cout << "Error" << SDL_GetError() << endl;
            success = false;
        }
        else{
            int imgFlags = IMG_INIT_PNG;
            if(!(IMG_Init(imgFlags) & imgFlags)){
                cout << "Error" << IMG_GetError() << endl;
                success = false;
            }
            else{
                main_window_surface = SDL_GetWindowSurface(main_window);
            }
        }

    }
    return success;
}

SDL_Surface *main_window_loadSurface(const char *path){
    SDL_Surface *optimizedimage = nullptr;
    SDL_Surface *loadedSurface = IMG_Load(path);
    if(loadedSurface == nullptr){
        cout << "Error" << IMG_GetError() << endl;
    }
    else{
        optimizedimage = SDL_ConvertSurface(loadedSurface, main_window_surface->format, 0);
        if(optimizedimage == nullptr){
            cout << "Error" << SDL_GetError() << endl;
        }
        SDL_FreeSurface(loadedSurface);
    }
    return optimizedimage;
}

bool main_window_load_media(){
    bool success = true;

    main_window_surface_jpg = main_window_loadSurface("image/logo.jpg");
    if(main_window_surface_jpg == nullptr){
        cout << "Error to load image" << endl;
    }
    return success;
}

void close_window_surface()
{
    SDL_FreeSurface(main_window_surface_jpg);
    main_window_surface_jpg = nullptr;
}

void create_main_window(Window_class ob){
    if (!init_SDL_lib(ob))
    {
        cerr << "Failed to initialize" << endl;
        return; // Return early if initialization fails
    }

    if (!main_window_load_media())
    {
        cerr << "Failed to load media" << endl;
        close_window_surface(); // Close the window immediately if media loading fails
        return;
    }

    SDL_Event event;
    bool quit = false;
  

    while (!quit)
    {
        while (SDL_PollEvent(&event) != 0)
        {
            if (event.type == SDL_QUIT)
            {
                quit = true; // Exit the event loop if the user closes the window
            }
            else if (event.type == SDL_KEYDOWN)
            {
                
                quit = true; //exit event loop
            }
        }
        SDL_FillRect(main_window_surface, nullptr, SDL_MapRGB(main_window_surface->format, 0, 0, 0));

        
        // Draw the image on the screen
        SDL_BlitSurface(main_window_surface_jpg, nullptr, main_window_surface, nullptr);

        // Update the window surface
        SDL_UpdateWindowSurface(main_window);

    }
    SDL_FreeSurface(main_window_surface);
  
}

void press_any_key(){
    SDL_Surface *press_any_key_surface = nullptr;
    SDL_Surface *press_any_key_surface_jpg = nullptr;

    press_any_key_surface = SDL_GetWindowSurface(main_window);
    press_any_key_surface_jpg = main_window_loadSurface("image/main_menu.jpg");
    if(press_any_key_surface_jpg == nullptr){
        cout << "Error to load image" << endl;
    }
    SDL_Event press_any_key_event;
    bool quit = false;

    while (!quit)
    {
        while (SDL_PollEvent(&press_any_key_event) != 0)
        {
            if (press_any_key_event.type == SDL_QUIT)
            {
                quit = true; // Exit the event loop if the user closes the window
            }
            else if (press_any_key_event.type == SDL_KEYDOWN)
            {

                quit = true; // exit event loop
            }
        }
         
       

        // Draw the image on the screen
        SDL_BlitSurface(press_any_key_surface_jpg, nullptr, press_any_key_surface, nullptr);

        // Update the window surface
        SDL_UpdateWindowSurface(main_window);
    }
    SDL_FreeSurface(main_window_surface);
}
#include <iostream>

#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>
#include "create_button.h"
#include "window.h"

using namespace std;

SDL_Renderer *create_render(const char *path){

SDL_Renderer *new_renderer = SDL_CreateRenderer(main_window, -1, SDL_RENDERER_ACCELERATED);
   if(new_renderer == nullptr){
    cout << "Error" << SDL_GetError() << endl;
   }
   SDL_Surface *new_surface = IMG_Load(path);
   SDL_Texture *new_texture = SDL_CreateTextureFromSurface(new_renderer, new_surface);
   SDL_FreeSurface(new_surface);
   if(new_texture == nullptr){
    cout << "Error" << SDL_GetError() << endl;
   }
return new_renderer;
}

SDL_Texture *create_texture(SDL_Renderer *obj, const char *path){
    SDL_Surface *new_surface = IMG_Load(path);
   SDL_Texture *new_texture = SDL_CreateTextureFromSurface(obj, new_surface);
   SDL_FreeSurface(new_surface);
   if(new_texture == nullptr){
    cout << "Error" << SDL_GetError() << endl;
   }
   return new_texture;
}


Button::Button(int x, int y, int height, int width, const char *path)
    :x_(x), y_(y), height_(height), width_(width), path_(path)
{   
    renderer_ = create_render(path_);
    texture_ = create_texture(renderer_, path_);
}

Button::~Button(){
    if (texture_ != nullptr) {
        SDL_DestroyTexture(texture_);
        texture_ = nullptr;
    }
}

int Button_a::get_x_pos(){
    return x_;
}

int Button_a::get_y_pos(){
    return y_;
}

int Button_a::get_height(){
    return height_;
}

int Button_a::get_width(){
    return width_;
}

SDL_Rect Button_a::get_button_rect(){
rect_.x = 100; // X-coordinate of the top-left corner
rect_.y = 200;
rect_.w = 300;
rect_.h = 75;
return rect_;
}

SDL_Texture *Button_a::get_button_texture(){
    return texture_;
}


SDL_Renderer* Button_a::get_renderer() {
    return renderer_;
}

void Button_a::handle_event_lclick(SDL_Event &event){
    if (event.type == SDL_MOUSEBUTTONDOWN && event.button.button == SDL_BUTTON_LEFT) {
        int mouseX, mouseY;
        SDL_GetMouseState(&mouseX, &mouseY);

        if (mouseX >= get_x_pos() && mouseX <= get_x_pos() + get_width() &&
            mouseY >= get_y_pos() && mouseY <= get_y_pos() + get_height()) {
            // Left mouse click occurred within the button's area
            // Handle the specific behavior for Button_a when clicked
            cout << "Button A clicked!" << endl;
        }
    }
}





#include<iostream>
#include<SDL2/SDL.h>
#include<SDL2/SDL_image.h>
#include"window.h"

using namespace std;

SDL_Surface *game_surface = nullptr;
SDL_Surface *game_surface_jpg = nullptr;

SDL_Surface *game_loadSurface(const char *path){
    SDL_Surface *optimizedimage = nullptr;
    SDL_Surface *loadedSurface = IMG_Load(path);
    if(loadedSurface == nullptr){
        cout << "Error" << IMG_GetError() << endl;
    }
    else{
        optimizedimage = SDL_ConvertSurface(loadedSurface, game_surface->format, 0);
        if(optimizedimage == nullptr){
            cout << "Error" << SDL_GetError() << endl;
        }
        SDL_FreeSurface(loadedSurface);
    }
    return optimizedimage;
}

void create_game(){
    game_surface = SDL_GetWindowSurface(main_window);
    game_surface_jpg = game_loadSurface("image/game.jpg");
    if(game_surface_jpg == nullptr){
        cout << "Error to load image" << endl;
    }
    SDL_Event game_event;
    bool quit = false;

    while (!quit)
    {
        while (SDL_PollEvent(&game_event) != 0)
        {
            if (game_event.type == SDL_QUIT)
            {
                quit = true; // Exit the event loop if the user closes the window
            }
            else if (game_event.type == SDL_KEYDOWN)
            {

                quit = true; // exit event loop
            }
        }
         
       

        // Draw the image on the screen
        SDL_BlitSurface(game_surface_jpg, nullptr, game_surface, nullptr);

        // Update the window surface
        SDL_UpdateWindowSurface(main_window);
        SDL_FreeSurface(game_surface_jpg);
        
    }
}
 #include<iostream>
#include<SDL2/SDL.h>
#include"show_button.h"
#include"window.h"
#include"create_button.h"

using namespace std;

void show_button(Button &obj){
    SDL_Rect loaded_rect = obj.get_button_rect();
    SDL_RenderCopy(obj.get_renderer(), obj.get_button_texture(), nullptr, &loaded_rect);
    SDL_RenderPresent(obj.get_renderer());
}